{"version":3,"file":"static/webpack/static/development/pages/_app.js.31950ee2f874e06ca576.hot-update.js","sources":["webpack:///./services/JarvisService.ts"],"sourcesContent":["import { MutableRefObject } from 'react';\nimport debounce from 'lodash/debounce';\nimport { TSetRefState } from '@/hooks/useRefState';\n\nexport enum JarvisStatus {\n  Idle = 'IDLE',\n  Active = 'ACTIVE', // show up jarvis dialog (from screen right)\n  Listening = 'LISTENING', // start listening (show animation)\n  Recognizing = 'RECOGNIZING',\n}\n\nexport type TJarvisResponse = {\n  confidence: number;\n  message: string;\n  isFinal: boolean;\n};\n\nconst regexp = {\n  HEY_JARVIS: /[J|T|G|D]arv/g,\n  STOP: /(thank you)|(stop)/g,\n};\n\nconst grammars = {\n  heyJarvis: `\n    #JSGF V1.0 utf-8 en;\n    grammar heyJarvis;\n\n    <hey> = /10/ hey | /0.2/ Hey | /0.2/ Hi | /0.2/ hi;\n    public <Jarvis> = /100/ Jarvis | /1/ Travis | /0/ Carlos | /0/ Bobby | /0/ drop it | /0/ Gabby | /0/ gummies;\n    <listening> = <hey>* <Jarvis>;\n  `,\n  stop: `\n    #JSGF V1.0 utf-8 en;\n    grammar stop;\n\n    <stop> = stop <Jarvis>*;\n    <thank you> = thank you <Jarvis>*;\n    `,\n};\n\ntype TJarvisServiceProps = {\n  status: MutableRefObject<JarvisStatus>;\n  setStatus: TSetRefState<JarvisStatus>;\n  setEnabled: TSetRefState<boolean>;\n  setResponse: TSetRefState<TJarvisResponse>;\n};\n\n// TODO:\n// [refactor]: handle if recognition is undefined\n\nexport default class JarvisService {\n  public props: TJarvisServiceProps;\n  private recognition: SpeechRecognition;\n  private recognizing: boolean = false;\n\n  constructor(props: TJarvisServiceProps) {\n    this.props = props;\n    // @ts-ignore\n    const Recognition = window.SpeechRecognition || webkitSpeechRecognition;\n    this.recognition = new Recognition() as SpeechRecognition;\n    this.initialize();\n    this.recognition.onresult = this.onresult;\n    this.recognition.onstart = this.onstart;\n    this.recognition.onend = this.onend;\n    this.recognition.onerror = this.onerror;\n\n    // enable jarvis service on DEFAULT\n    this.enable();\n  }\n\n  initialize() {\n    if (this.recognition) {\n      const speechGrammarList = this.generateGrammarList();\n\n      this.recognition.grammars = speechGrammarList;\n      this.recognition.lang = 'en-US';\n      this.recognition.continuous = true; // continuous results are returned for each recognition\n      this.recognition.interimResults = true;\n    }\n  }\n\n  generateGrammarList() {\n    const SpeechGrammarList =\n      // @ts-ignore\n      window.SpeechGrammarList || webkitSpeechGrammarList;\n    const speechGrammarList = new SpeechGrammarList();\n    Object.values(grammars).forEach(grammar =>\n      speechGrammarList.addFromString(grammar, 10),\n    );\n    return speechGrammarList;\n  }\n\n  // tslint:disable\n  onresult = debounce(event => {\n    if (!this.recognizing) {\n      this.recognizing = true;\n      const { status, setStatus, setResponse } = this.props;\n      const target = event.results[event.resultIndex];\n\n      // run before anything when matches \"stop grammar\",\n      // set jarvis status to \"Idle\"\n      if (regexp.STOP.exec(target[0].transcript) && target.isFinal) {\n        setStatus(JarvisStatus.Idle);\n        return;\n      }\n\n      switch (status.current) {\n        case JarvisStatus.Idle: {\n          if (regexp.HEY_JARVIS.exec(target[0].transcript)) {\n            console.log('setste');\n            setStatus(JarvisStatus.Active);\n          }\n          break;\n        }\n\n        case JarvisStatus.Listening: {\n          // listening suggestion\n          console.log('listening');\n          break;\n        }\n      }\n      console.log(event);\n      setResponse({\n        message: target[0].transcript,\n        confidence: target[0].confidence,\n        isFinal: target.isFinal,\n      });\n      this.recognizing = false;\n    }\n  }, 100);\n\n  onstart = () => this.props.setEnabled(true);\n\n  onend = () => {\n    this.props.setEnabled(false);\n    this.props.setStatus(JarvisStatus.Idle);\n  };\n\n  onerror = (event: any) => {\n    console.error('error', event);\n  };\n\n  enable() {\n    this.recognition.start();\n  }\n\n  disable() {\n    this.recognition.stop();\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AACA;AAGA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAYA;AACA;AACA;AAFA;AAKA;AACA;AAQA;AATA;AACA;AAwBA;AACA;AAEA;;;AAKA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AAuCA;AACA;AADA;AAAA;AAAA;AAAA;AAGA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAbA;AACA;AAcA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AA3EA;AA4EA;AAAA;AACA;AA7EA;AA+EA;AACA;AAAA;AACA;AACA;AAlFA;AAoFA;AACA;AACA;AArFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;;;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;;;AAmDA;AACA;AACA;;;AAEA;AACA;AACA;;;;;;;;;;A","sourceRoot":""}