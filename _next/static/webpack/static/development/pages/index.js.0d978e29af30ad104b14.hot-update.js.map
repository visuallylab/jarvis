{"version":3,"file":"static/webpack/static/development/pages/index.js.0d978e29af30ad104b14.hot-update.js","sources":["webpack:///./components/Jarvis/Listening.tsx"],"sourcesContent":["import { FC, useContext, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { animated, useSpring } from 'react-spring';\nimport SiriWave from 'siriwave';\n\nimport { JarvisContext } from '@/contexts/jarvisContext';\nimport { JarvisStatus } from '@/services/JarvisService';\n\nconst Wrapper = styled(animated.div)`\n  position: absolute;\n  top: 2vh;\n  right: 2vw;\n  width: 84%; /* it equals to 25% of window */\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  border: solid 2px ${p => p.theme.colors.spaceGray};\n  background: rgba(70, 73, 76, 0.95);\n  border-radius: ${p => p.theme.borderRadius};\n  padding: 8px;\n  box-shadow: 0px 0px 5px 2px #353535;\n\n  p {\n    margin: 5px;\n  }\n`;\n\nconst ListeningJarvis: FC = () => {\n  const wrapperRef = useRef<HTMLDivElement | null>(null);\n  const jarvisWave = useRef<any>(null);\n  const { status, response, setStatus } = useContext(JarvisContext);\n  const props = useSpring({\n    transform: `translateX(${status === JarvisStatus.Idle ? '0%' : '0%'})`,\n    onRest: () => {\n      console.log('rest', status);\n      if (status === JarvisStatus.Active) {\n        // when jarvis dialog show up, start listening\n        jarvisWave.current.set\n        jarvisWave.current.start();\n        setStatus(JarvisStatus.Listening);\n        return;\n      }\n\n      console.log(status);\n\n      if (status === JarvisStatus.Idle) {\n        // jarvisWave.current.stop();\n        return;\n      }\n    },\n  });\n\n  useEffect(() => {\n    if (wrapperRef.current) {\n      jarvisWave.current = new SiriWave({\n        container: document.getElementById('jarvis-wave'),\n        width: wrapperRef.current.offsetWidth * 0.8,\n        height: 40,\n        style: 'ios9',\n        amplitude: 0,\n      });\n\n      jarvisWave.current.start();\n    }\n  }, []);\n\n  return (\n    <Wrapper style={props} ref={wrapperRef}>\n      <p>\n        <b>What can I help you ?...</b>\n      </p>\n      <div id=\"jarvis-wave\" />\n      <p>{response.message}</p>\n    </Wrapper>\n  );\n};\n\nexport default ListeningJarvis;\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAQA;AAAA;AAEA;AAAA;AACA;AAQA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAIA;AAAA;AAIA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}